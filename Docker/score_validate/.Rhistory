}
plot_AUPRC <- function(df, title){
df %>%
ggplot(aes(x = recall, y = precision)) +
geom_point() +
geom_line() +
theme_bw() +
ggtitle(title)
}
plot_df <- function(df){
pr_df <- calculate_precision_and_recall(df)
score <- calculate_ranked_AUPRC_from_df(df)
print(plot_AUPRC(pr_df, str_c("AUPRC: ", score)))
kable(pr_df)
}
dfs <- list(df_combineda, df_combinedb, df_combinedc, df_combinedd, df_combinede,
df_combinedf, df_combinedg, df_combined1, df_combined1_5, df_combined2)
names <- c("df_a", "df_b", "df_c", "df_d", "df_e", "df_f", "df_g", "df_1", "df_1_5", "df_2")
for(i in 1:length(dfs)){
df <- dfs[[i]]
pr_df <- calculate_precision_and_recall(df) %>%
score <- calculate_ranked_AUPRC_from_df(df)
title <- str_c(names[[i]], ", AUPRC: ", score)
print(plot_AUPRC(pr_df, title))
print(kable(calculate_precision_and_recall(pr_df)))
cat('\n\n\n')
}
source('~/repos/irwg/shiny-iatlas/modules/tilmodule.R', echo=TRUE)
shiny::runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
shiny::runApp('repos/irwg/shiny-iatlas')
options(repos=c("https://sage-bionetworks.github.io/ran", "http://cran.fhcrc.org"))
install.packages("synapser")
library(data.table)
library(magrittr)
library(pheatmap)
library(ROCR)
library(knitr)
setwd("~/")
setwd("~/")
library(plyr)
library(doMC)
library(tidyverse)
# library(synapser)
library(synapseClient)
library(data.table)
library(magrittr)
library(pheatmap)
library(knitr)
home_dir <- "/home/aelamb/repos/swi_gene_analysis/"
tmp_dir  <- "/home/aelamb/tmp/swi_gene_analysis/"
setwd(home_dir)
# source("scripts/utils.R")
source("scripts/synapseClient_functions.R")
setwd(tmp_dir)
# synLogin()
synapseLogin()
registerDoMC(cores = 7)
tcga_expr_id <- "syn11924499"
tcga_pat_id  <- "syn11924167"
tcga_mut_id  <- "syn11924339"
swi_genes <-  c(
"ACTB",
"ARID1A",
"ARID1B",
"ARID2",
"BCL11A",
"BCL11B",
"BRD7",
"BRD9",
"PBRM1",
"PHF10",
"SMARCA2",
"SMARCA4",
"SMARCB1",
"SMARCC2",
"SMARCD1",
"SMARCD2",
"SMARCD3",
"SMARCE1",
"SS18")
selected_genes <- c(swi_genes, "ERCC1")
selected_cancers = c(
"BRCA",
"COAD",
"CHOL",
"DLBC",
"KIRC",
"OV",
"PAAD",
"READ",
"STAD",
"THCA",
"THYM",
"UCEC"
)
mut_df <- tcga_mut_id %>%
download_from_synapse %>%
fread(select = c("patient", "Hugo_Symbol")) %>%
as_data_frame
mut_burden_df <- mut_df %>%
group_by(patient) %>%
dplyr::summarise(mut_burden = n()) %>%
ungroup
swi_mut_df <- mut_df %>%
filter(Hugo_Symbol %in% swi_genes) %>%
distinct
add_mutant_status_cols <- function(df, genes){
map(genes, add_mutant_status_col, df)  %>%
reduce(left_join)
}
add_mutant_status_col <- function(col, df){
df %>%
select(patient) %>%
distinct %>%
inset(col, value = ifelse(col %in% df$Hugo_Symbol, "Mut", "WT"))
}
mut_status_df <- mut_df %>%
filter(Hugo_Symbol %in% selected_genes) %>%
distinct %>%
split(.$patient) %>%
llply(add_mutant_status_cols, selected_genes, .parallel = T) %>%
bind_rows
pat_df <- tcga_pat_id %>%
create_df_from_synapse_id %>%
select(sample_name, patient, tumor) %>%
arrange(sample_name) %>%
left_join(mut_burden_df) %>%
mutate(log10_mut_burden = round(log10(mut_burden), 2)) %>%
# mutate(log2_mut_burden = round(log2(mut_burden), 2)) %>%
left_join(mut_status_df)
pat_df[is.na(pat_df)] <- "WT"
mut_expr_df <- tcga_expr_id %>%
create_df_from_synapse_id %>%
select(c("patient", selected_genes))
swi_status_summary_df <- swi_mut_df %>%
inner_join(pat_df) %>%
select(patient, tumor) %>%
group_by(tumor) %>%
dplyr::summarise(swi_mutants = n())
gene_status_summary_df <- mut_df %>%
filter(Hugo_Symbol %in% selected_genes) %>%
distinct %>%
inner_join(pat_df) %>%
select(patient, tumor, Hugo_Symbol) %>%
group_by(tumor, Hugo_Symbol) %>%
dplyr::summarise(mutants = n()) %>%
spread(key = "Hugo_Symbol", value = "mutants")
gene_status_summary_df[is.na(gene_status_summary_df)] <- 0
expr_summary_df <- pat_df %>%
select(patient, tumor) %>%
inner_join(mut_expr_df) %>%
select(tumor, PBRM1, ERCC1) %>%
group_by(tumor) %>%
dplyr::summarise(
mean_pbrm1_expr = mean(PBRM1),
mean_ercc1_expr = mean(ERCC1))
cancer_summary_df <- pat_df %>%
select(tumor) %>%
group_by(tumor) %>%
dplyr::summarise(patients = n()) %>%
inner_join(swi_status_summary_df) %>%
inner_join(gene_status_summary_df) %>%
select(tumor, patients, swi_mutants, pbrm1_mutants = PBRM1, ercc1_mutants = ERCC1) %>%
inner_join(expr_summary_df)
swi_df <- inner_join(pat_df, mut_expr_df, by = c("patient"))
# remove(mut_burden_df, mut_df, swi_mut_df, swi_status_df)
cancers = pat_df %>%
use_series(tumor) %>%
unique %>%
sort
make_groups <- function(df){
n_samples <- nrow(df)
df %>%
arrange(expression) %>%
mutate(num = 1:n_samples) %>%
mutate(group = ifelse(num < (n_samples / 2), "low",
ifelse(num > ((3 * n_samples) / 4 ), "high", "med")))
}
df_by_groups <-
left_join(gather(mut_expr_df, key = "swi_gene", value = "expression", - patient),
select(pat_df, patient, tumor, mut_burden, log10_mut_burden)) %>%
mutate(gene_tumor = str_c(swi_gene, ":", tumor)) %>%
split(.$gene_tumor) %>%
llply(make_groups, .parallel = T) %>%
bind_rows %>%
filter(group != "med")
transpose_df <- function(df, id_column, new_col){
df %>%
df_to_matrix(id_column) %>%
t() %>%
matrix_to_df(new_col)
}
df_to_matrix <- function(df, id_column){
df %>%
data.frame() %>%
tibble::column_to_rownames(id_column) %>%
as.matrix()
}
matrix_to_df <- function(matrix, new_col){
matrix %>%
data.frame() %>%
tibble::rownames_to_column(new_col) %>%
tibble::as_data_frame()
}
boxplot_df <- pat_df %>%
gather(
key = "swi_gene",
"value" = status,
- c(sample_name, patient, tumor, mut_burden, log10_mut_burden))
do_wilcox_test <- function(df){
wt_vals <- df %>%
filter(status == "WT") %>%
use_series(mut_burden)
mut_vals <- df %>%
filter(status == "Mut") %>%
use_series(mut_burden)
if(min(length(wt_vals), length(mut_vals)) < 2){
pvalue <-  NA
} else {
pvalue = wilcox.test(wt_vals, mut_vals)$p.value
}
data_frame(
"tumor" = df$tumor[[1]],
"swi_gene" = df$swi_gene[[1]],
"wilcox_pvalue" = pvalue)
}
pvalue_df <- boxplot_df %>%
select(tumor, swi_gene, mut_burden, status) %>%
group_by(tumor, swi_gene) %>%
do(do_wilcox_test(.))
boxplot_df2 <- boxplot_df %>%
left_join(pvalue_df) %>%
mutate(sig = ifelse(is.na(wilcox_pvalue),
"no",
ifelse(wilcox_pvalue > 0.01,
"no",
"yes"))) %>%
mutate(tumor_label = ifelse(sig == "no", tumor, str_c("\\* ", tumor))) %>%
mutate(status = factor(status, levels = c("WT", "Mut")))
create_mut_burden_box_plots <- function(df){
p <- df %>%
ggplot(aes_string(x = "tumor_label", y = "log10_mut_burden", fill = "status")) +
geom_boxplot() +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, size = 12)) +
theme(axis.text.y = element_text(size = 12)) +
theme(strip.text.y = element_text(size = 10, angle = 0)) +
ggtitle(df$swi_gene[[1]]) +
ylab("Log10 mutation load per tumor") +
xlab("TCGA cancer type")
print(p)
}
plot_dfs <- split(boxplot_df2, boxplot_df2$swi_gene)
l_ply(plot_dfs, create_mut_burden_box_plots, .parallel = F)
display_df <- pvalue_df %>%
drop_na() %>%
filter(wilcox_pvalue < 0.05) %>%
mutate(pvalue = round(wilcox_pvalue, 4)) %>%
mutate(neg_log_pvalue = round(- log10(wilcox_pvalue), 4)) %>%
select(-wilcox_pvalue) %>%
arrange(desc(neg_log_pvalue))
View(display_df)
View(pvalue_df)
do_wilcox_test <- function(df){
wt_vals <- df %>%
filter(status == "WT") %>%
use_series(mut_burden)
mut_vals <- df %>%
filter(status == "Mut") %>%
use_series(mut_burden)
if(min(length(wt_vals), length(mut_vals)) < 2){
pvalue <-  NA
} else {
pvalue = wilcox.test(wt_vals, mut_vals)$p.value
}
data_frame(
"tumor" = df$tumor[[1]],
"swi_gene" = df$swi_gene[[1]],
"wilcox_pvalue" = pvalue,
"med_mut_burden_wt" = median(wt_vals),
"med_mut_burden_mut" = median(mut_vals))
}
pvalue_df <- boxplot_df %>%
select(tumor, swi_gene, mut_burden, status) %>%
group_by(tumor, swi_gene) %>%
do(do_wilcox_test(.))
View(pvalue_df)
display_df <- pvalue_df %>%
drop_na() %>%
filter(wilcox_pvalue < 0.05) %>%
mutate(pvalue = round(wilcox_pvalue, 4)) %>%
mutate(neg_log_pvalue = round(- log10(wilcox_pvalue), 4)) %>%
select(-wilcox_pvalue) %>%
arrange(desc(neg_log_pvalue))
View(display_df)
shiny::runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
user_group_df <- read_csv("/home/aelamb/Downloads/TCGA iAtlas.csv")
View(user_group_df)
df = panimmune_data$fmx_df
df$ParticipantBarcode
user_group_df$ParticipantID %in% df$ParticipantBarcode
user_group_df %>%
rename("ParticipantBarcode" = colnames(user_group_df)[[1]])
user_group_df %>%
rename("ParticipantBarcode" = colnames(user_group_df)[[1]]) %>%
inner_join(df)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/functions/transform.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/functions/transform.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/groupsoverviewmodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/groupsoverviewmodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
?req
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/survivalmodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/drivermodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/functions/transform.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/drivermodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/irwg/shiny-iatlas/modules/drivermodule.R', echo=TRUE)
source('~/repos/irwg/shiny-iatlas/modules/groupsoverviewmodule.R', echo=TRUE)
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
runApp('repos/irwg/shiny-iatlas')
source('~/repos/swi_gene_analysis/all_cancer_analysis/univariate_gene_analysis.R', echo=TRUE)
remove(training_df)
remove(training_df, df)
names(models) <- all_genes
names(models)
setwd("~/repos/Tumor-Deconvolution-Challenge-Workflow/R")
setwd("~/repos/Tumor-Deconvolution-Challenge-Workflow")
setwd("~/repos/Tumor-Deconvolution-Challenge-Workflow/R")
setwd("~/repos/Tumor-Deconvolution-Challenge-Workflow/Docker/score_validate")
setwd("~/repos/Tumor-Deconvolution-Challenge-Workflow/Docker/score_validate")
setwd("~/repos/Tumor-Deconvolution-Challenge-Workflow/Docker/score_validate")
library(readr)
library(tidyr)
library(dplyr)
submission_file <- "../example_files/submission_rd1.csv"
validation_file <- "../example_files/validation_rd1.csv"
submission_df <- submission_file %>%
readr::read_csv() %>%
tidyr::gather(key = "sample", value = "prediction", -cell_type) %>%
dplyr::mutate(prediction = as.numeric(prediction))
validation_df <- validation_file %>%
readr::read_csv() %>%
tidyr::gather(key = "sample", value = "measured", -cell_type) %>%
dplyr::mutate(measured = as.numeric(measured))
combined_df <- left_join(validation_df, submission_df)
score_df <- combined_df %>%
dplyr::group_by(cell_type) %>%
dplyr::summarise(spearman = cor(measured, prediction, method = "spearman"))
summary_df <- score_df %>%
dplyr::summarise(mean_spearman = mean(spearman, na.rm = T))
setwd("~/repos/Tumor-Deconvolution-Challenge-Workflow/Docker/score_validate")
source('~/repos/Tumor-Deconvolution-Challenge-Workflow/Docker/score_validate/score.R', echo=TRUE)
View(combined_df)
View(score_df)
split(score_df)
split(score_df$cell_type, score_df$spearman)
?split
?enframe
deframe(score_df)
library(readr)
library(tidyr)
library(dplyr)
deframe(score_df)
library(tibble)
tibble:deframe(score_df)
result_list <- tibble:deframe(score_df)
View(score_df)
score_df <- combined_df %>%
dplyr::group_by(cell_type) %>%
dplyr::summarise(spearman = cor(measured, prediction, method = "spearman")) %>%
dplyr::replace_na(list(spearman = NULL))
?replace_na
score_df <- combined_df %>%
dplyr::group_by(cell_type) %>%
dplyr::summarise(spearman = cor(measured, prediction, method = "spearman")) %>%
tidyr::replace_na(list(spearman = NULL))
score_df <- combined_df %>%
dplyr::group_by(cell_type) %>%
dplyr::summarise(spearman = cor(measured, prediction, method = "spearman")) %>%
tidyr::replace_na(list(spearman = "a"))
score_df <- combined_df %>%
dplyr::group_by(cell_type) %>%
dplyr::summarise(spearman = cor(measured, prediction, method = "spearman")) %>%
tydyr::drop_na()
score_df <- combined_df %>%
dplyr::group_by(cell_type) %>%
dplyr::summarise(spearman = cor(measured, prediction, method = "spearman")) %>%
tidyr::drop_na()
tibble:deframe(score_df)
score_df <- combined_df %>%
dplyr::group_by(cell_type) %>%
dplyr::summarise(spearman = cor(measured, prediction, method = "spearman")) %>%
tidyr::drop_na()
tibble:deframe(score_df)
tibble::deframe(score_df)
View(summary_df)
mean_spearman <- score_df %>%
dplyr::summarise(mean_spearman = mean(spearman, na.rm = T)) %>%
magrittr::use_series(mean_spearman)
mean_spearman <- score_df %>%
dplyr::summarise(mean_spearman = mean(spearman, na.rm = T)) %>%
magrittr::use_series(mean_spearman)
result_list <- score_df %>%
tibble::deframe() %>%
magrittr::inset("mean_spearman" = mean_spearman)
result_list
score_df %>%
tibble::deframe()
?magrittr::inset
result_list <- score_df %>%
tibble::deframe() %>%
magrittr::inset2("mean_spearman" = mean_spearman)
result_list <- score_df %>%
tibble::deframe()
result_list$mean_spearman = mean_spearman
result_list
result_list <- score_df %>%
tibble::deframe() %>%
as.list()
result_list$mean_spearman = mean_spearman
result_list <- score_df %>%
tibble::deframe() %>%
as.list() %>%
magrittr::inset2("mean_spearman" = mean_spearman)
result_list <- score_df %>%
tibble::deframe() %>%
as.list() %>%
magrittr::inset("mean_spearman" = mean_spearman)
View(result_list)
result_list <- score_df %>%
tibble::deframe() %>%
as.list() %>%
magrittr::inset("mean_spearman" = mean_spearman)
score_df %>%
tibble::deframe()
score_df %>%
tibble::deframe() %>%
as.list()
score_df %>%
tibble::deframe() %>%
as.list() %>%
magrittr::inset("mean_spearman" = mean_spearman)
score_df %>%
tibble::deframe() %>%
as.list() %>%
magrittr::inset("mean_spearman", value = mean_spearman)
score_df %>%
tibble::deframe() %>%
as.list() %>%
magrittr::inset("mean_spearman", value = mean_spearman) %>%
rjson::toJSON
score_df %>%
tibble::deframe() %>%
as.list() %>%
magrittr::inset("mean_spearman", value = mean_spearman) %>%
rjson::toJSON()
list("predictionFileStatus" = STATUS)
